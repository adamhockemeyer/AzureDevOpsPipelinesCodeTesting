# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Debug'

stages:
- stage: Build
  jobs:
  - job:
    steps:
    - task: NuGetToolInstaller@1
    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'
      displayName: 'dotnet build $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: True

    # this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)' 
        artifactName: 'DotNetTestingAzurePipelines'
    - task: Docker@2
      inputs:
        containerRegistry: 'devopstesting-containerregistry'
        repository: 'loadtest'
        command: 'buildAndPush'
        Dockerfile: '**/LoadTest/Dockerfile'
        tags: 'latest'
- stage: UnitTest
  jobs:
  - job:
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        command: 'test'
        arguments: '--configuration $(buildConfiguration) --filter TestCategory=Unit --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
        publishTestResults: true
        projects: '**/SampleApp.Tests/*.csproj'   
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
      continueOnError: false
      


- stage: Deploy
  jobs:
  - deployment: DeployWeb
    displayName: Deploy Web App
    environment: 'Stage'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              targetPath: '$(Pipeline.Workspace)'
              artifactName: 'DotNetTestingAzurePipelines'
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure-DevOpsPipelinesCodeTesting'
              appType: 'webAppLinux'
              WebAppName: 'DevOpsPipelinesCodeTesting'
              packageForLinux: '$(Pipeline.Workspace)/SampleApp.zip'

- stage: UITest
  pool:
    vmImage: 'windows-latest'
  jobs:
  - job:
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        command: 'test'
        arguments: '--configuration $(buildConfiguration) --filter TestCategory=UI --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
        publishTestResults: true
        projects: '**/SampleApp.Tests/*.csproj'   

- stage: LoadTest
  jobs:
  - job:
    steps:   
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Azure-DevOpsPipelinesCodeTesting'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          
          rgName=DevOpsPipelinesCodeTesting; aciName=k6loadtest;
          az container create -g $rgName -n $aciName --no-wait --image docker pull devopstestingahock.azurecr.io/loadtest:latest  --restart-policy Never;
